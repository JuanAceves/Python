{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "e4aef3a2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "La felicidad se puede encontrar hasta en los mas oscuros momentos, \n",
      "si somos capaces d eusar bien la luz.\n",
      " - Albus Dumbledore\n"
     ]
    }
   ],
   "source": [
    "#Imprimir la frase\n",
    "print('''La felicidad se puede encontrar hasta en los mas oscuros momentos, \n",
    "si somos capaces d eusar bien la luz.\n",
    " - Albus Dumbledore''')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "6e7bb444",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "hola mundo\n"
     ]
    }
   ],
   "source": [
    "#Guardar una cadena en una frase\n",
    "mensaje = \"hola mundo\"\n",
    "print(mensaje)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "3d009ddd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Introduce tu nombre>>>\n",
      "> Juan \n",
      "Introduce tu Apellido>>>\n",
      "> Aceves\n",
      "Hola Juan  Aceves, gusto en conocerte!\n"
     ]
    }
   ],
   "source": [
    "#Nombre y Apellido\n",
    "nombre = \"\" \n",
    "apellido = \"\"\n",
    "\n",
    "print(\"Introduce tu nombre>>>\")\n",
    "nombre = input(\"> \")\n",
    "print(\"Introduce tu Apellido>>>\")\n",
    "Apellido = input(\"> \")\n",
    "print(\"Hola %s %s, gusto en conocerte!\" %(nombre,Apellido))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "e53f0511",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      ">>> Introduce tu nombre: \n",
      "> Juan\n",
      ">>> Introduce tu apellido: \n",
      "> Aceves\n",
      "Hola Juan Aceves, gusto en conocerte!\n"
     ]
    }
   ],
   "source": [
    "#Nombre y Apellido con .format\n",
    "# Declaracion de variables\n",
    "nombre = \"\"\n",
    "apellido = \"\"\n",
    " \n",
    "# Solicitud de Datos\n",
    "print(\">>> Introduce tu nombre: \")\n",
    "nombre = input(\"> \")\n",
    "print(\">>> Introduce tu apellido: \")\n",
    "apellido= input(\"> \")\n",
    " \n",
    "# Mensaje en Pantalla: Metodo .format()\n",
    "print(\"Hola {0} {1}, gusto en conocerte!\".format(nombre,apellido))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b3cd6faa",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      ">>> Introduce tu nombre: \n"
     ]
    }
   ],
   "source": [
    "#Nombre y Apellido con f strings\n",
    "# Declaracion de variables\n",
    "nombre = \"\"\n",
    "apellido = \"\"\n",
    " \n",
    "# Solicitud de Datos\n",
    "print(\">>> Introduce tu nombre: \")\n",
    "nombre = input(\"> \")\n",
    "print(\">>> Introduce tu apellido: \")\n",
    "apellido= input(\"> \")\n",
    " \n",
    "# Mensaje en Pantalla: f-strings\n",
    "print(f\"Hola {nombre} {apellido}, gusto en conocerte!\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "3e470f39",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Introduce un número entero: \n",
      "> 5\n",
      "La suma desde 1 hasta 5 es 15.0\n"
     ]
    }
   ],
   "source": [
    "#Suma de Números Positivos suma = n(n+1)/2\n",
    "suma = 0.0\n",
    "numero = 0\n",
    " \n",
    "# Solicitud de Datos\n",
    "print(\"Introduce un número entero: \")\n",
    "numero = int(input(\"> \"))\n",
    " \n",
    "# Cálculo de la suma\n",
    "suma = numero * (numero + 1) / 2\n",
    "print(\"La suma desde 1 hasta \" + str(numero) + \" es \" + str(suma))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "eaec95cd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Introduce la medida del lado de cuadrado: \n",
      "> 3\n",
      "El area del cuadrado es:  9\n"
     ]
    }
   ],
   "source": [
    "#Area de un cuadrado\n",
    "int_lado=0\n",
    "int_area=0\n",
    "\n",
    "print(\"Introduce la medida del lado de cuadrado: \")\n",
    "int_lado = int(input(\"> \"))\n",
    "\n",
    "int_area = int_lado**2\n",
    "print(\"El area del cuadrado es:  %d\"%(int_area))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "b073374f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Introduce la medida del lado de triangulo: \n",
      "Base > 6\n",
      "Altura > 9\n",
      "El area del triangulo es  4\n"
     ]
    }
   ],
   "source": [
    "#Area de untriangulo\n",
    "int_base=0\n",
    "int_altura=0\n",
    "float_area\n",
    "\n",
    "print(\"Introduce la medida del lado de triangulo: \")\n",
    "int_base = int(input(\"Base > \"))\n",
    "int_altura = int(input(\"Altura > \"))\n",
    "\n",
    "float_area = (int_base*int_altura)/2\n",
    "print(\"El area del triangulo es  %d\"%(float_area))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "6859f146",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Introduce la medida del lado de triangulo: \n",
      "Radio > 5\n",
      "El area del circulo es  78\n"
     ]
    }
   ],
   "source": [
    "#Area de un circulo \n",
    "PI=3.1416\n",
    "int_radio=0\n",
    "float_area=0.0\n",
    "\n",
    "print(\"Introduce la medida del lado de triangulo: \")\n",
    "int_radio = int(input(\"Radio > \"))\n",
    "\n",
    "\n",
    "float_area = PI*(int_radio**2)\n",
    "print(\"El area del circulo es  %d\"%(float_area))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "1745d8e3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "LLEVAR GRADOS FARENHEIT A CELCIUS\n",
      "Introduzca los grados Farenheit: 5\n",
      "Grados Celsius:  -15.00°C\n"
     ]
    }
   ],
   "source": [
    "#Farenheut a celsius\n",
    "\n",
    "# Declaracion de Variables\n",
    "int_farenheit = 0\n",
    "float_celcius = 0.0\n",
    " \n",
    "# Incio del programa\n",
    "print(\"LLEVAR GRADOS FARENHEIT A CELCIUS\")\n",
    " \n",
    "# SOLICITUD de Datos \n",
    "int_farenheit = int(input('Introduzca los grados Farenheit: '))\n",
    " \n",
    "# FAHRENHEIT A CELCIUS\n",
    "float_celcius = (int_farenheit-32.0)*5.0/9.0\n",
    " \n",
    "print(\"Grados Celsius:  %0.2f\"%(float_celcius) + \"°C\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "d80ea8e7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "----------------------------------------\n",
      "           RADAR DE VELOCIDAD           \n",
      "----------------------------------------\n",
      ">>> La Velocidad es: 66.85 millas/hora. \n",
      "----------------------------------------\n"
     ]
    }
   ],
   "source": [
    "#Radar de Velocidad\n",
    "ANCHO = 40\n",
    "RELLENO1 = \"-\"\n",
    "RELLENO2 = \" \"\n",
    "CADENA_VACIA = \"\"\n",
    "######################################################################\n",
    " \n",
    "# Mensajes a Mostrar\n",
    "MENSAJE_INICIAL = \"RADAR DE VELOCIDAD\"\n",
    " \n",
    "######################################################################\n",
    " \n",
    "# Declaracion de variables\n",
    "Velocidad   = 0.0\n",
    "Frecuencia0 = 2e-10            \n",
    "Frecuencia1 = 2.0000004e-10    \n",
    " \n",
    "# Formato de Salida Final en Pantalla\n",
    "Formato_Respuesta = \">>> La Velocidad es: %0.2f millas/hora.\"\n",
    " \n",
    "######################################################################\n",
    " \n",
    "# Encabezado del Programa\n",
    "# LINEA 1: Parte superior de la Tabla\n",
    "print(CADENA_VACIA.center(ANCHO,RELLENO1))\n",
    "# Mensaje Centrado\n",
    "print(MENSAJE_INICIAL.center(ANCHO,RELLENO2))\n",
    " \n",
    "######################################################################\n",
    " \n",
    "# Inicio del Programa:\n",
    "# Calculo de la VELOCIDAD del radar\n",
    "# velocidad = 6.685x10^8 x (f1 - f0) / (f1 + f0)\n",
    "Velocidad=6.685e8*(Frecuencia1-Frecuencia0)/(Frecuencia1+Frecuencia0)\n",
    " \n",
    "# LINEA 2: Separador de la tabla\n",
    "print(CADENA_VACIA.center(ANCHO,RELLENO1))\n",
    "# Se muestra el mensaje en Pantalla\n",
    "print(Formato_Respuesta.center(ANCHO,RELLENO2) %(Velocidad))\n",
    " \n",
    "######################################################################\n",
    " \n",
    "# LINEA 3: Parte Inferior de la Tabla\n",
    "print(CADENA_VACIA.center(ANCHO,RELLENO1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "b093182d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "----------------------------------------\n",
      "      CALCULADORA FREELANCER (USD)      \n",
      "----------------------------------------\n",
      ">>> Precio en dolares por Hora: 20\n",
      "----------------------------------------\n",
      ">>> PAGO SEMANAL: 800.00\n",
      ">>> PAGO MENSUAL: 3200.00\n",
      "----------------------------------------\n"
     ]
    }
   ],
   "source": [
    "# Valores para Dibujar la Tabla\n",
    "ANCHO = 40\n",
    "RELLENO1 = \"-\"\n",
    "RELLENO2 = \" \"\n",
    "CADENA_VACIA = \"\"\n",
    " \n",
    "######################################################################\n",
    " \n",
    "# Declaracion de Constantes\n",
    "HORAS_SEMANALES = 40\n",
    "HORAS_MENSUALES = 160\n",
    " \n",
    "######################################################################\n",
    " \n",
    "# Mensajes a Mostrar\n",
    "MENSAJE_INICIAL = \"CALCULADORA FREELANCER (USD)\"\n",
    "# Mensajes de solicitud de Datos\n",
    "SOLICITAR_PRECIO = \">>> Precio en dolares por Hora: \"\n",
    "# Mensajes de Error\n",
    "ERROR_FORMATO = \"SOLO SE PERMITEN NUMEROS\"\n",
    " \n",
    "######################################################################\n",
    " \n",
    "# Declaracion de variables\n",
    "Pago_Semanal, Pago_Mensual , Dolares_Por_Hora,  = 0.0 , 0.0, 0.0\n",
    "# Formato de Salida Final en Pantalla\n",
    "Formato_Respuesta = \">>> PAGO SEMANAL: %4.2f\\n>>> PAGO MENSUAL: %4.2f\"\n",
    " \n",
    "######################################################################\n",
    " \n",
    "# Encabezado del Programa\n",
    "# LINEA 1: Parte superior de la Tabla\n",
    "print(CADENA_VACIA.center(ANCHO,RELLENO1))\n",
    "# Mensaje Centrado\n",
    "print(MENSAJE_INICIAL.center(ANCHO,RELLENO2))\n",
    "# LINEA 2: Separador de la tabla\n",
    "print(CADENA_VACIA.center(ANCHO,RELLENO1))\n",
    " \n",
    "######################################################################\n",
    " \n",
    "# Inicio del Programa:\n",
    "try:\n",
    "    # Solicitud de Datos\n",
    "    Dolares_Por_Hora   = float(input(SOLICITAR_PRECIO))\n",
    " \n",
    "    # Cálculos para el pago Semanal y Mensual\n",
    "    Pago_Semanal = Dolares_Por_Hora * HORAS_SEMANALES\n",
    "    Pago_Mensual = Dolares_Por_Hora * HORAS_MENSUALES\n",
    " \n",
    "    # LINEA 3: Separador de la tabla\n",
    "    print(CADENA_VACIA.center(ANCHO,RELLENO1))\n",
    " \n",
    "    # Se muestra el mensaje en Pantalla\n",
    "    print(Formato_Respuesta %(Pago_Semanal,Pago_Mensual))\n",
    " \n",
    "except ValueError:\n",
    "    print(CADENA_VACIA.center(ANCHO,RELLENO1))\n",
    "    print(ERROR_FORMATO.center(ANCHO,RELLENO2))\n",
    " \n",
    "######################################################################\n",
    " \n",
    "# LINEA 4: Parte Inferior de la Tabla\n",
    "print(CADENA_VACIA.center(ANCHO,RELLENO1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "096389c8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Ingrese un nuemero: 55\n",
      "el numero es positivo\n"
     ]
    }
   ],
   "source": [
    "#Numero possitivo y negativo\n",
    "\n",
    "numero =0\n",
    "\n",
    "numero = float(input(\"Ingrese un numero: \"))\n",
    "\n",
    "if numero == 0:\n",
    "    print(\"El numero no es positio ni negativo\")\n",
    "\n",
    "elif numero < 0:\n",
    "     print('el numero es negativo')\n",
    "else:\n",
    "    if numero >0:\n",
    "        print(\"el numero es positivo\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3cce980f",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Edad igual o menor\n",
    "\n",
    "edadP1 = 0\n",
    "edadP2 = 0\n",
    "\n",
    "edadP1 = int(input(\"Edad de persona uno: \"))\n",
    "edadP2 = int(input(\"Edad persona dos: \"))\n",
    "\n",
    "if edadP1>edadP2:\n",
    "    print(\"La persona uno es mayor\")\n",
    "elif edadP2 > edadP1:\n",
    "    print(\"La persona dos es mayor\")\n",
    "else:\n",
    "    if edadP1==edadP2:\n",
    "     print(\"Ambos tiene la misma edad\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "949b47df",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Edad de persona uno: 100\n",
      "Edad persona dos: 100\n",
      "Ambos tiene la misma edad\n"
     ]
    }
   ],
   "source": [
    "#Edad igual o menor\n",
    "\n",
    "edadP1 = 0\n",
    "edadP2 = 0\n",
    "\n",
    "edadP1 = int(input(\"Edad de persona uno: \"))\n",
    "edadP2 = int(input(\"Edad persona dos: \"))\n",
    "\n",
    "if edadP1>edadP2:\n",
    "    print(\"La persona uno es mayor\")\n",
    "elif edadP2 > edadP1:\n",
    "    print(\"La persona dos es mayor\")\n",
    "else:\n",
    "    if edadP1==edadP2:\n",
    "     print(\"Ambos tiene la misma edad\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "58a3388d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "El numero es: 2\n",
      "El resultado 2 es par\n"
     ]
    }
   ],
   "source": [
    "#par o impar\n",
    "\n",
    "int_numero = 0\n",
    "\n",
    "int_numero = int(input('El numero es: '))\n",
    "\n",
    "\n",
    "if int_numero == (int_numero // 2) * 2:\n",
    "    print('El resultado %d es par' %(int_numero))\n",
    "else:\n",
    "    print('El resultado %d es impar' %(int_numero))\n",
    "    \n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "8cbb45a7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      ">>> Introduce un numero: 7\n",
      "El numero 7 es impar.\n"
     ]
    }
   ],
   "source": [
    "#f-strings\n",
    "\n",
    "# Declaracion de variables:\n",
    "int_Numero = 0\n",
    " \n",
    "# Solicitud de Datos\n",
    "int_Numero = int(input('>>> Introduce un numero: '))\n",
    " \n",
    "if int_Numero == (int_Numero // 2) * 2:\n",
    "    print(f\"El numero {int_Numero} es par.\")\n",
    "else:\n",
    "    print(f\"El numero {int_Numero} es impar.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "0456e96b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Introduce el numero: 3\n",
      "El resultado 3 es multiplo de 3\n"
     ]
    }
   ],
   "source": [
    "#Multiplos de 3\n",
    "\n",
    "int_numero=0\n",
    "\n",
    "int_numero = int(input('Introduce el numero: '))\n",
    "\n",
    "if int_numero == (int_numero // 3)*3:\n",
    "    print('El resultado %d es multiplo de 3' %(int_numero))\n",
    "else:\n",
    "    print('El resultado %d no es multiplo de 3' %(int_numero))\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "341b6184",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      ">>> Introduce una letra: A\n",
      "La letra es Mayuscula.\n"
     ]
    }
   ],
   "source": [
    "#Mayuscula o Minuscula\n",
    "# Declaracion de variables\n",
    "letra = ''\n",
    " \n",
    "# Solicitud de Datos\n",
    "letra = input('>>> Introduce una letra: ')\n",
    " \n",
    "if letra <= 'z'  and letra >= 'a':  # a-z (97-122)\n",
    "    print('La letra es minuscula.')\n",
    " \n",
    "elif letra <= 'Z' and letra >= 'A':  # A-Z (65-90)\n",
    "    print('La letra es Mayuscula.')\n",
    "else:\n",
    "    print('El valor introducido no es una letra.')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "2b54fffd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Introduce el primer numero 4\n",
      "Introduce el numero dos5\n",
      "Introduce el numero tres6\n",
      ">>> El numero maximo es:  6.00\n"
     ]
    }
   ],
   "source": [
    "#comparando tres numeros\n",
    "\n",
    "numero1=0.0\n",
    "numero2=0.0\n",
    "numero3=0.0\n",
    "\n",
    "numero1 = float(input('Introduce el primer numero: '))\n",
    "numero2 = float(input('Introduce el numero dos: '))\n",
    "numero3 = float(input('Introduce el numero tres: '))\n",
    "\n",
    "if numero1>numero2:\n",
    "    if numero1>numero3:\n",
    "        maximo = numero1\n",
    "    else:\n",
    "        maximo = numero3\n",
    "else:\n",
    "    if numero2 > numero3:\n",
    "        maximo = numero2\n",
    "    else:\n",
    "        maximo = numero3\n",
    " \n",
    "    print('>>> El numero maximo es: %5.2f' %(maximo))\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "8f1a3d2b",
   "metadata": {},
   "outputs": [
    {
     "ename": "IndentationError",
     "evalue": "unindent does not match any outer indentation level (<tokenize>, line 21)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  File \u001b[1;32m<tokenize>:21\u001b[1;36m\u001b[0m\n\u001b[1;33m    if tercer_numero > posible_maximo:\u001b[0m\n\u001b[1;37m    ^\u001b[0m\n\u001b[1;31mIndentationError\u001b[0m\u001b[1;31m:\u001b[0m unindent does not match any outer indentation level\n"
     ]
    }
   ],
   "source": [
    "#Mayor de 5 numeros\n",
    "# Declaracion de variables\n",
    "primer_numero  = 0.0\n",
    "segundo_numero = 0.0\n",
    "tercer_numero  = 0.0\n",
    "cuarto_numero  = 0.0\n",
    "quinto_numero  = 0.0\n",
    " \n",
    "# Solicitud de datos\n",
    "primer_numero  = float(input('Introduce el Primer  numero: '))\n",
    "segundo_numero = float(input('Introduce el Segundo numero: '))\n",
    "tercer_numero  = float(input('Introduce el Tercer  numero: '))\n",
    "cuarto_numero  = float(input('Introduce el Cuarto  numero: '))\n",
    "quinto_numero  = float(input('Introduce el Quinto  numero: '))\n",
    " \n",
    "posible_maximo = primer_numero\n",
    " \n",
    "if segundo_numero > posible_maximo:\n",
    "        posible_maximo = segundo_numero\n",
    " \n",
    "    if tercer_numero > posible_maximo:\n",
    "        posible_maximo = tercer_numero\n",
    " \n",
    "    if cuarto_numero > posible_maximo:\n",
    "        posible_maximo = cuarto_numero\n",
    " \n",
    "    if quinto_numero > posible_maximo:\n",
    "        posible_maximo = quinto_numero\n",
    " \n",
    "    maximo = posible_maximo\n",
    " \n",
    "    print ('>>> El Numero maximo es: %5.2f' %(maximo))\n",
    "\n",
    " \n",
    "    print('>>> El numero maximo es: %5.2f' %(maximo))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "459799fe",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Introduce el Primer  numero: 4\n",
      "Introduce el Segundo numero: 7\n",
      "Introduce el Tercer  numero: 8\n",
      "Introduce el Cuarto  numero: 0\n",
      "Introduce el Quinto  numero: 0\n",
      "El numero mas cercano a 4 es 7\n"
     ]
    }
   ],
   "source": [
    "#Numero mas cercano\n",
    "# Declaracion de variables\n",
    "primer_numero  = 0.0\n",
    "segundo_numero = 0.0\n",
    "tercer_numero  = 0.0\n",
    "cuarto_numero  = 0.0\n",
    "quinto_numero  = 0.0\n",
    " \n",
    "Resta1 = 0.0\n",
    "Resta2 = 0.0\n",
    "Resta3 = 0.0\n",
    "Resta4 = 0.0\n",
    " \n",
    "# Solicitud de datos\n",
    "primer_numero  = int(input('Introduce el Primer  numero: '))\n",
    "segundo_numero = int(input('Introduce el Segundo numero: '))\n",
    "tercer_numero  = int(input('Introduce el Tercer  numero: '))\n",
    "cuarto_numero  = int(input('Introduce el Cuarto  numero: '))\n",
    "quinto_numero  = int(input('Introduce el Quinto  numero: '))\n",
    " \n",
    "# Se realizan las restas para hallar la menor diferencia\n",
    "Resta1 = primer_numero - segundo_numero\n",
    "Resta2 = primer_numero - tercer_numero\n",
    "Resta3 = primer_numero - cuarto_numero\n",
    "Resta4 = primer_numero - quinto_numero\n",
    " \n",
    "menor_diferencia = Resta1\n",
    " \n",
    "if Resta2 < menor_diferencia and Resta2 >= 0:\n",
    "   menor_diferencia = Resta2\n",
    "else:\n",
    "    if Resta2 > menor_diferencia and Resta2 <= 0:\n",
    "        menor_diferencia = Resta2\n",
    " \n",
    "if Resta3 < menor_diferencia and Resta3 >= 0:\n",
    "   menor_diferencia = Resta3\n",
    "else:\n",
    "    if Resta3 > menor_diferencia and Resta3 <= 0:\n",
    "        menor_diferencia = Resta3\n",
    " \n",
    "if Resta4 < menor_diferencia and Resta4 >= 0:\n",
    "   menor_diferencia = Resta4\n",
    "else:\n",
    "    if Resta4 > menor_diferencia and Resta4 <= 0:\n",
    "        menor_diferencia = Resta4\n",
    " \n",
    "numero_cercano = primer_numero - menor_diferencia\n",
    " \n",
    "print('El numero mas cercano a %d es %d'%(primer_numero,numero_cercano))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "2640cf02",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "----------------------------------------\n",
      "  ECUACION DE PRIMER GRADO: ax + b = 0  \n",
      "----------------------------------------\n",
      ">>> Valor de a: 6\n",
      ">>> Valor de b: 8\n",
      "----------------------------------------\n",
      "ECUACION: 6.0 x + 8.0 = 0\n",
      "----------------------------------------\n",
      ">>> SOLUCION: x =  -1.3333333333333333\n",
      "----------------------------------------\n"
     ]
    }
   ],
   "source": [
    "#Ecuacion primer grado\n",
    "# Valores para Dibujar la Tabla\n",
    "ANCHO = 40\n",
    "RELLENO1 = \"-\"\n",
    "RELLENO2 = \" \"\n",
    "CADENA_VACIA = \"\"\n",
    " \n",
    "######################################################################\n",
    " \n",
    "MENSAJE_INICIAL = \"ECUACION DE PRIMER GRADO: ax + b = 0\"\n",
    " \n",
    "######################################################################\n",
    " \n",
    "# Declaracion de variables\n",
    "a = 0 # Coeficiente principal\n",
    "b = 0 # Termino Independiente\n",
    "x = 0 # Incognita\n",
    " \n",
    "# Formato de Salida Final en Pantalla\n",
    "Formato_Ecuacion = \"ECUACION: {} x + {} = 0\"\n",
    " \n",
    "######################################################################\n",
    " \n",
    "# Encabezado del Programa\n",
    "print(CADENA_VACIA.center(ANCHO,RELLENO1))\n",
    "print(MENSAJE_INICIAL.center(ANCHO,RELLENO2))\n",
    "print(CADENA_VACIA.center(ANCHO,RELLENO1))\n",
    " \n",
    "######################################################################\n",
    " \n",
    "# Inicio del Programa:\n",
    "a = float(input(\">>> Valor de a: \"))\n",
    "b = float(input(\">>> Valor de b: \"))\n",
    " \n",
    "print(CADENA_VACIA.center(ANCHO,RELLENO1))\n",
    "print(Formato_Ecuacion.format(a,b))\n",
    "print(CADENA_VACIA.center(ANCHO,RELLENO1))\n",
    " \n",
    "try:\n",
    "    x = -b/a\n",
    "    print(\">>> SOLUCION: x = \", x)\n",
    "except:\n",
    "    if b != 0:\n",
    "        print(\"La ECUACION no tiene solucion.\")\n",
    "    else:\n",
    "        print(\"La ECUACION tiene infinitas soluciones.\")\n",
    " \n",
    "######################################################################\n",
    " \n",
    "print(CADENA_VACIA.center(ANCHO,RELLENO1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "e3a46cea",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-------------------------------------------------------\n",
      "      ECUACION DE SEGUNDO GRADO: ax^2 + bx + c = 0     \n",
      "-------------------------------------------------------\n",
      ">>> Valor de a: 2\n",
      ">>> Valor de b: 7\n",
      ">>> Valor de c: 2\n",
      "-------------------------------------------------------\n",
      ">>> SOLUCIONES: x1 = -0.31 y x2 = -3.19\n",
      "-------------------------------------------------------\n"
     ]
    }
   ],
   "source": [
    "#formula general/ ecuacion de segun\n",
    "# Importacion de librerias\n",
    "from math import sqrt\n",
    " \n",
    "######################################################################\n",
    " \n",
    "# Valores para Dibujar la Tabla\n",
    "ANCHO = 55\n",
    "RELLENO1 = \"-\"\n",
    "RELLENO2 = \" \"\n",
    "CADENA_VACIA = \"\"\n",
    " \n",
    "######################################################################\n",
    " \n",
    "MENSAJE_INICIAL = \"ECUACION DE SEGUNDO GRADO: ax^2 + bx + c = 0\"\n",
    " \n",
    "######################################################################\n",
    " \n",
    "# Declaracion de Variables\n",
    "a, b, c = 0, 0, 0\n",
    "x1, x2  = 0.0, 0.0\n",
    "discriminante = 0\n",
    " \n",
    "######################################################################\n",
    " \n",
    "# Encabezado del Programa\n",
    "print(CADENA_VACIA.center(ANCHO,RELLENO1))\n",
    "print(MENSAJE_INICIAL.center(ANCHO,RELLENO2))\n",
    "print(CADENA_VACIA.center(ANCHO,RELLENO1))\n",
    " \n",
    "######################################################################\n",
    " \n",
    "# Solicitud de Datos \n",
    "a = float(input(\">>> Valor de a: \"))\n",
    "b = float(input(\">>> Valor de b: \"))\n",
    "c = float(input(\">>> Valor de c: \"))\n",
    " \n",
    "discriminante = b**2 - 4*a*c\n",
    " \n",
    "try:\n",
    "    x1 = (-b + sqrt(discriminante)) / (2 * a)\n",
    "    x2 = (-b - sqrt(discriminante)) / (2 * a)\n",
    " \n",
    "    print(CADENA_VACIA.center(ANCHO,RELLENO1))\n",
    " \n",
    "    if x1 == x2:\n",
    "        print(\">>> SOLUCION: x = %4.2f\" % x1)\n",
    "    else:\n",
    "        print(\">>> SOLUCIONES: x1 = %4.2f y x2 = %4.2f\" % (x1, x2))\n",
    " \n",
    "except ZeroDivisionError:\n",
    " \n",
    "    print(CADENA_VACIA.center(ANCHO,RELLENO1))\n",
    " \n",
    "    if b != 0:\n",
    "        print(\"La ecuacion no tiene solucion.\")\n",
    "    else:\n",
    "        print(\"La ecuacion tiene infinitas soluciones.\")\n",
    " \n",
    "except ValueError:\n",
    "    # Casos:\n",
    "    # 1) Se produce una division por cero.\n",
    "    # 2) Se produce por calcular la raız cuadrada de un discriminante\n",
    "    # negativo.\n",
    "    print(CADENA_VACIA.center(ANCHO,RELLENO1))\n",
    "    print(\"No hay soluciones reales\")\n",
    " \n",
    "######################################################################\n",
    " \n",
    "print(CADENA_VACIA.center(ANCHO,RELLENO1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "65a98a12",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Ecribe el numero de la tabla a seguir2\n",
      "2 x  1 = 2\n",
      "2 x  2 = 4\n",
      "2 x  3 = 6\n",
      "2 x  4 = 8\n",
      "2 x  5 = 10\n",
      "2 x  6 = 12\n",
      "2 x  7 = 14\n",
      "2 x  8 = 16\n",
      "2 x  9 = 18\n",
      "2 x 10 = 20\n"
     ]
    }
   ],
   "source": [
    "#Multiplicador de 1 al 10\n",
    "multiplicador = 1\n",
    "resultado = 0\n",
    "numero = 0\n",
    "\n",
    "numero = int(input('Ecribe el numero de la tabla a seguir'))\n",
    "\n",
    "while multiplicador > 0 and multiplicador < 11:\n",
    "    resultado = numero * multiplicador\n",
    "    print(\"%d x %2d = %d\" %(numero,multiplicador,resultado))\n",
    "    multiplicador = multiplicador + 1\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "1461caaf",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      ">>> Introduce el numero a multiplicar: 5\n",
      "5 x  1 = 5\n",
      "5 x  2 = 10\n",
      "5 x  3 = 15\n",
      "5 x  4 = 20\n",
      "5 x  5 = 25\n",
      "5 x  6 = 30\n",
      "5 x  7 = 35\n",
      "5 x  8 = 40\n",
      "5 x  9 = 45\n",
      "5 x 10 = 50\n"
     ]
    }
   ],
   "source": [
    "# Solicitud de Datos\n",
    "#multiplicador numero 1-10\n",
    "numero = int(input('>>> Introduce el numero a multiplicar: '))\n",
    " \n",
    "for multiplicador in range(1,11):\n",
    "    resultado = numero * multiplicador\n",
    "    print(\"%d x %2d = %d\" % (numero,multiplicador,resultado))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "a4625b1b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      ">>> Introduce el numero a elevar: 5\n",
      "5 elevado a  1 es 5\n",
      "5 elevado a  2 es 25\n",
      "5 elevado a  3 es 125\n",
      "5 elevado a  4 es 625\n",
      "5 elevado a  5 es 3125\n",
      "5 elevado a  6 es 15625\n",
      "5 elevado a  7 es 78125\n",
      "5 elevado a  8 es 390625\n",
      "5 elevado a  9 es 1953125\n",
      "5 elevado a 10 es 9765625\n"
     ]
    }
   ],
   "source": [
    "#Potencia\n",
    "# Declaracion de variables\n",
    "potencia = 1\n",
    "resultado = 0\n",
    "numero = 0\n",
    " \n",
    "# Solicitud de datos\n",
    "numero = int(input('>>> Introduce el numero a elevar: '))\n",
    " \n",
    "while potencia > 0 and potencia  < 11:\n",
    "    resultado= numero ** potencia\n",
    "    print(\"%d elevado a %2d es %d\"%(numero,potencia,resultado))\n",
    "    potencia = potencia + 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "81cda3d4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      ">>> Introduce el numero a elevar: 6\n",
      "6 elevado a  1 es 6\n",
      "6 elevado a  2 es 36\n",
      "6 elevado a  3 es 216\n",
      "6 elevado a  4 es 1296\n",
      "6 elevado a  5 es 7776\n",
      "6 elevado a  6 es 46656\n",
      "6 elevado a  7 es 279936\n",
      "6 elevado a  8 es 1679616\n",
      "6 elevado a  9 es 10077696\n",
      "6 elevado a 10 es 60466176\n"
     ]
    }
   ],
   "source": [
    "#Potencia\n",
    "# Solicitud de Datos\n",
    "numero = int(input('>>> Introduce el numero a elevar: '))\n",
    " \n",
    "for potencia in range(1,11):\n",
    "    resultado= numero ** potencia\n",
    "    print(\"%d elevado a %2d es %d\"%(numero,potencia,resultado))\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "599e1dd2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      ">>> Introduce el numero a crecer: 1\n",
      " 2\n",
      " 3\n",
      " 4\n",
      " 5\n",
      " 6\n",
      " 7\n",
      " 8\n",
      " 9\n",
      " 10\n",
      " 11\n",
      " 12\n",
      " 13\n",
      " 14\n",
      " 15\n",
      " 16\n",
      " 17\n",
      " 18\n",
      " 19\n",
      " 20\n",
      " 21\n",
      " 22\n",
      " 23\n",
      " 24\n",
      " 25\n",
      " 26\n",
      " 27\n",
      " 28\n",
      " 29\n",
      " 30\n",
      " 31\n",
      " 32\n",
      " 33\n",
      " 34\n",
      " 35\n",
      " 36\n",
      " 37\n",
      " 38\n",
      " 39\n",
      " 40\n",
      " 41\n",
      " 42\n",
      " 43\n",
      " 44\n",
      " 45\n",
      " 46\n",
      " 47\n",
      " 48\n",
      " 49\n",
      " 50\n",
      " 51\n",
      " 52\n",
      " 53\n",
      " 54\n",
      " 55\n",
      " 56\n",
      " 57\n",
      " 58\n",
      " 59\n",
      " 60\n",
      " 61\n",
      " 62\n",
      " 63\n",
      " 64\n",
      " 65\n",
      " 66\n",
      " 67\n",
      " 68\n",
      " 69\n",
      " 70\n",
      " 71\n",
      " 72\n",
      " 73\n",
      " 74\n",
      " 75\n",
      " 76\n",
      " 77\n",
      " 78\n",
      " 79\n",
      " 80\n",
      " 81\n",
      " 82\n",
      " 83\n",
      " 84\n",
      " 85\n",
      " 86\n",
      " 87\n",
      " 88\n",
      " 89\n",
      " 90\n",
      " 91\n",
      " 92\n",
      " 93\n",
      " 94\n",
      " 95\n",
      " 96\n",
      " 97\n",
      " 98\n",
      " 99\n",
      " 100\n",
      " 101\n",
      " 102\n",
      " 103\n",
      " 104\n",
      " 105\n",
      " 106\n",
      " 107\n",
      " 108\n",
      " 109\n",
      " 110\n",
      " 111\n",
      " 112\n",
      " 113\n",
      " 114\n",
      " 115\n",
      " 116\n",
      " 117\n",
      " 118\n",
      " 119\n",
      " 120\n",
      " 121\n",
      " 122\n",
      " 123\n",
      " 124\n",
      " 125\n",
      " 126\n",
      " 127\n",
      " 128\n",
      " 129\n",
      " 130\n",
      " 131\n",
      " 132\n",
      " 133\n",
      " 134\n",
      " 135\n",
      " 136\n",
      " 137\n",
      " 138\n",
      " 139\n",
      " 140\n",
      " 141\n",
      " 142\n",
      " 143\n",
      " 144\n",
      " 145\n",
      " 146\n",
      " 147\n",
      " 148\n",
      " 149\n",
      " 150\n",
      " 151\n",
      " 152\n",
      " 153\n",
      " 154\n",
      " 155\n",
      " 156\n",
      " 157\n",
      " 158\n",
      " 159\n",
      " 160\n",
      " 161\n",
      " 162\n",
      " 163\n",
      " 164\n",
      " 165\n",
      " 166\n",
      " 167\n",
      " 168\n",
      " 169\n",
      " 170\n",
      " 171\n",
      " 172\n",
      " 173\n",
      " 174\n",
      " 175\n",
      " 176\n",
      " 177\n",
      " 178\n",
      " 179\n",
      " 180\n",
      " 181\n",
      " 182\n",
      " 183\n",
      " 184\n",
      " 185\n",
      " 186\n",
      " 187\n",
      " 188\n",
      " 189\n",
      " 190\n",
      " 191\n",
      " 192\n",
      " 193\n",
      " 194\n",
      " 195\n",
      " 196\n",
      " 197\n",
      " 198\n",
      " 199\n",
      " 200\n",
      " 201\n"
     ]
    }
   ],
   "source": [
    "#Numeros del 0 - 100 en incremento de 1\n",
    "numero = int(input('>>> Introduce el numero a crecer: '))\n",
    " \n",
    "for aumenta in range(0,201):\n",
    "    resultado = numero + aumenta\n",
    "    print(\" %d\" % (resultado))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "cc0a4019",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Imprimir los numeros pares entre 0 y 200 de forma Creciente\n",
      "2\n",
      "4\n",
      "6\n",
      "8\n",
      "10\n",
      "12\n",
      "14\n",
      "16\n",
      "18\n",
      "20\n",
      "22\n",
      "24\n",
      "26\n",
      "28\n",
      "30\n",
      "32\n",
      "34\n",
      "36\n",
      "38\n",
      "40\n",
      "42\n",
      "44\n",
      "46\n",
      "48\n",
      "50\n",
      "52\n",
      "54\n",
      "56\n",
      "58\n",
      "60\n",
      "62\n",
      "64\n",
      "66\n",
      "68\n",
      "70\n",
      "72\n",
      "74\n",
      "76\n",
      "78\n",
      "80\n",
      "82\n",
      "84\n",
      "86\n",
      "88\n",
      "90\n",
      "92\n",
      "94\n",
      "96\n",
      "98\n",
      "100\n",
      "102\n",
      "104\n",
      "106\n",
      "108\n",
      "110\n",
      "112\n",
      "114\n",
      "116\n",
      "118\n",
      "120\n",
      "122\n",
      "124\n",
      "126\n",
      "128\n",
      "130\n",
      "132\n",
      "134\n",
      "136\n",
      "138\n",
      "140\n",
      "142\n",
      "144\n",
      "146\n",
      "148\n",
      "150\n",
      "152\n",
      "154\n",
      "156\n",
      "158\n",
      "160\n",
      "162\n",
      "164\n",
      "166\n",
      "168\n",
      "170\n",
      "172\n",
      "174\n",
      "176\n",
      "178\n",
      "180\n",
      "182\n",
      "184\n",
      "186\n",
      "188\n",
      "190\n",
      "192\n",
      "194\n",
      "196\n",
      "198\n",
      "200\n"
     ]
    }
   ],
   "source": [
    "print('Imprimir los numeros pares entre 0 y 200 de forma Creciente')\n",
    " \n",
    "for pares in range(0,201):\n",
    "    if pares == int(pares/2)*2 and pares>0:\n",
    "        print(pares)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "85baefb8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Imprimir los numeros pares entre 0 y 200 de forma decreciente\n",
      "200\n",
      "198\n",
      "196\n",
      "194\n",
      "192\n",
      "190\n",
      "188\n",
      "186\n",
      "184\n",
      "182\n",
      "180\n",
      "178\n",
      "176\n",
      "174\n",
      "172\n",
      "170\n",
      "168\n",
      "166\n",
      "164\n",
      "162\n",
      "160\n",
      "158\n",
      "156\n",
      "154\n",
      "152\n",
      "150\n",
      "148\n",
      "146\n",
      "144\n",
      "142\n",
      "140\n",
      "138\n",
      "136\n",
      "134\n",
      "132\n",
      "130\n",
      "128\n",
      "126\n",
      "124\n",
      "122\n",
      "120\n",
      "118\n",
      "116\n",
      "114\n",
      "112\n",
      "110\n",
      "108\n",
      "106\n",
      "104\n",
      "102\n",
      "100\n",
      "98\n",
      "96\n",
      "94\n",
      "92\n",
      "90\n",
      "88\n",
      "86\n",
      "84\n",
      "82\n",
      "80\n",
      "78\n",
      "76\n",
      "74\n",
      "72\n",
      "70\n",
      "68\n",
      "66\n",
      "64\n",
      "62\n",
      "60\n",
      "58\n",
      "56\n",
      "54\n",
      "52\n",
      "50\n",
      "48\n",
      "46\n",
      "44\n",
      "42\n",
      "40\n",
      "38\n",
      "36\n",
      "34\n",
      "32\n",
      "30\n",
      "28\n",
      "26\n",
      "24\n",
      "22\n",
      "20\n",
      "18\n",
      "16\n",
      "14\n",
      "12\n",
      "10\n",
      "8\n",
      "6\n",
      "4\n",
      "2\n"
     ]
    }
   ],
   "source": [
    "#Numeros del 200 - 0 en forma decreciente \n",
    "print('Imprimir los numeros pares entre 0 y 200 de forma decreciente')\n",
    " \n",
    "for pares in range(200,-1,-1):\n",
    "    if pares == int(pares/2)*2 and pares > 0:\n",
    "        print(pares)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "ef9449cb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      ">>> Introduce un numero: 100\n",
      "2\n",
      "4\n",
      "6\n",
      "8\n",
      "10\n",
      "12\n",
      "14\n",
      "16\n",
      "18\n",
      "20\n",
      "22\n",
      "24\n",
      "26\n",
      "28\n",
      "30\n",
      "32\n",
      "34\n",
      "36\n",
      "38\n",
      "40\n",
      "42\n",
      "44\n",
      "46\n",
      "48\n",
      "50\n",
      "52\n",
      "54\n",
      "56\n",
      "58\n",
      "60\n",
      "62\n",
      "64\n",
      "66\n",
      "68\n",
      "70\n",
      "72\n",
      "74\n",
      "76\n",
      "78\n",
      "80\n",
      "82\n",
      "84\n",
      "86\n",
      "88\n",
      "90\n",
      "92\n",
      "94\n",
      "96\n",
      "98\n",
      "100\n"
     ]
    }
   ],
   "source": [
    "# Imprimir números pares hasta un número dado\n",
    "numero = int(input('>>> Introduce un numero: '))\n",
    " \n",
    "for pares in range(0,numero + 1):\n",
    "    if pares == int(pares/2)*2 and pares>0:\n",
    "        print(pares)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "c8771689",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      ">>> Dame un mumero: 8\n",
      "1\n",
      "2\n",
      "3\n",
      "5\n",
      "7\n"
     ]
    }
   ],
   "source": [
    "# Numero impares\n",
    "limite = int(input('>>> Dame un mumero: '))\n",
    " \n",
    "for numero in range(1, limite + 1):\n",
    "    creo_que_es_primo = True\n",
    "    for divisor in range(2,numero):\n",
    "        if numero % divisor == 0:\n",
    "            creo_que_es_primo = False\n",
    "            break\n",
    " \n",
    "    if creo_que_es_primo:\n",
    "            print(numero)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a9ed704a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      ">>> IMPRIMIR MATRIZ  : [['1', '2', '3', 'A'], ['4', '5', '6', 'B'], ['7', '8', '9', 'C'], ['*', '0', '#', 'D']]\n",
      ">>> FILA A IMPRIMIR  : ['*', '0', '#', 'D']\n",
      ">>> DATO A IMPRIMIR  : *\n"
     ]
    }
   ],
   "source": [
    "#Matrices\n",
    "# Declaracion de Variables:\n",
    "Matriz = []\n",
    "Fila = 3\n",
    "Columna = 0\n",
    " \n",
    "# Creacion de la matriz del teclado Matricial 4x4\n",
    "Matriz = [['1', '2', '3', 'A'],\n",
    "          ['4', '5', '6', 'B'],\n",
    "          ['7', '8', '9', 'C'],\n",
    "          ['*', '0', '#', 'D']]\n",
    " \n",
    "# Se imprime la matriz en pantalla\n",
    "print(\">>> IMPRIMIR MATRIZ  : %s\" %(Matriz))\n",
    "print(\">>> FILA A IMPRIMIR  : %s\" %(Matriz[Fila]))\n",
    "print(\">>> DATO A IMPRIMIR  : %s\" %(Matriz[Fila][Columna]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "190a1470",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      ">>> IMPRIMIR MATRIZ  : [['7', '8', '9'], ['4', '5', '6'], ['7', '8', '9']]\n",
      ">>> FILA A IMPRIMIR  : ['7', '8', '9']\n",
      ">>> FILA A IMPRIMIR  : ['4', '5', '6']\n",
      ">>> FILA A IMPRIMIR  : ['7', '8', '9']\n"
     ]
    }
   ],
   "source": [
    "Matriz = []\n",
    "Fila1 = 0\n",
    "Fila2 = 1\n",
    "Fila3 = 2\n",
    "\n",
    "\n",
    "Matriz = [['7', '8', '9'],\n",
    "          ['4', '5', '6'],\n",
    "          ['7', '8', '9']]\n",
    "\n",
    "print(\">>> IMPRIMIR MATRIZ  : %s\" %(Matriz))\n",
    "print(\">>> FILA A IMPRIMIR  : %s\" %(Matriz[Fila1]))\n",
    "print(\">>> FILA A IMPRIMIR  : %s\" %(Matriz[Fila2]))\n",
    "print(\">>> FILA A IMPRIMIR  : %s\" %(Matriz[Fila3]))\n",
    "\n",
    " "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "e7c933be",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      ">>> MATRIZ: [[7, 8, 9], [4, 5, 6], [7, 8, 9]]\n",
      ">>> FILA 1: [7, 8, 9]\n",
      ">>> FILA 2: [4, 5, 6]\n",
      ">>> FILA 3: [7, 8, 9]\n"
     ]
    }
   ],
   "source": [
    "#Matricez con for y len\n",
    "# Declaracion de Variables:\n",
    "Matriz = []\n",
    "Longitud = 0\n",
    " \n",
    "# Creacion de la matriz \n",
    "Matriz = [[7, 8, 9], [4, 5, 6,], [7, 8, 9]]\n",
    " \n",
    "# Longitud de la Matriz\n",
    "Longitud = len(Matriz)\n",
    " \n",
    "print(\">>> MATRIZ: %s\" %(Matriz))\n",
    " \n",
    "# Se imprime cada fila de la matriz\n",
    "for fila in range(Longitud):\n",
    "    print(\">>> FILA %d: %s\" %(fila+1, Matriz[fila]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "7007a3af",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      ">>> Numero de filas (m): 2\n",
      ">>> Numero de columnas (n): 2\n",
      "\n",
      ">>> MATRIZ M(2x2): [[0, 0], [0, 0]]\n",
      "\n",
      "[0, 0]\n",
      "[0, 0]\n"
     ]
    }
   ],
   "source": [
    "#Matriz cero o nula \n",
    "# Declaracion de Variables:\n",
    "Longitud = 0\n",
    "m_filas = 0\n",
    "n_columnas = 0\n",
    " \n",
    "######################################################################\n",
    " \n",
    "# Pedimos la dimensión de la matriz:\n",
    "m_filas    = int(input(\">>> Numero de filas (m): \"))\n",
    "n_columnas = int(input(\">>> Numero de columnas (n): \"))\n",
    " \n",
    "# Se crea la matriz nula\n",
    "M = []\n",
    " \n",
    "# Se agregan los elementos a la Matriz\n",
    "for elemento in range(m_filas):\n",
    "    M.append ([0] * n_columnas)\n",
    " \n",
    "# Longitud de la Matriz\n",
    "Longitud = len(M)\n",
    " \n",
    "######################################################################\n",
    " \n",
    "print(\"\\n>>> MATRIZ M(%dx%d): %s\\n\" %(m_filas,n_columnas,M))\n",
    " \n",
    "# Se imprime cada fila de la matriz\n",
    "for fila in range(Longitud):\n",
    "    print(M[fila])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "57d51faf",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      ">>> Dimension de la matriz de tamaño n x n: 3\n",
      "\n",
      ">>> MATRIZ M(3x3): [[1, 0, 0], [0, 1, 0], [0, 0, 1]]\n",
      "\n",
      "[1, 0, 0]\n",
      "[0, 1, 0]\n",
      "[0, 0, 1]\n"
     ]
    }
   ],
   "source": [
    "#Matriz de identidad\n",
    "# Declaracion de Variables:\n",
    "M = []\n",
    "longitud = 0\n",
    "dimension = 0\n",
    " \n",
    "######################################################################\n",
    " \n",
    "# Pedimos la dimensión de la matriz,\n",
    "dimension = int(input(\">>> Dimension de la matriz de tamaño n x n: \"))\n",
    " \n",
    "# Creamos una matriz nula...\n",
    "for elemento in range(dimension):\n",
    "        M.append ([0] * dimension)\n",
    " \n",
    "# ... y leemos su contenido\n",
    "for fila in range(dimension):\n",
    "    for columna in range(dimension):\n",
    "        # Si el numero de fila y columna es igual\n",
    "        if fila == columna:\n",
    "             # Guarda el número 1 en la posición\n",
    "             M[fila][columna] = 1\n",
    " \n",
    "######################################################################\n",
    " \n",
    "print(\"\\n>>> MATRIZ M(%dx%d): %s\\n\" %(dimension,dimension,M))\n",
    " \n",
    "longitud = len(M)\n",
    " \n",
    "# Se imprime cada fila de la matriz\n",
    "for valor in range(longitud):\n",
    "    print(M[valor])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "369bc768",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
